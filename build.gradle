buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.2.0'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.palantir.git-version' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'com.github.spotbugs' version "5.0.13"
}
apply plugin: 'biz.aQute.bnd.builder'
repositories {
    mavenCentral()
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.required = true // codecov depends on xml format report
        html.required = true
    }
}

dependencies {
    implementation "commons-logging:commons-logging:1.1.1"
    implementation "org.xerial.snappy:snappy-java:1.1.8.4"
    implementation "org.apache.commons:commons-compress:1.22"
    implementation 'org.tukaani:xz:1.8'
    implementation ('org.sharegov:mjson:1.4.1') {
        exclude group: "junit"
    }

    api "gov.nih.nlm.ncbi:ngs-java:2.9.0"
    api "org.apache.commons:commons-jexl:2.1.1"

    testImplementation "org.testng:testng:6.14.3"
    testImplementation "com.google.jimfs:jimfs:1.1"
    testImplementation "com.google.guava:guava:26.0-jre"
    testImplementation "org.apache.commons:commons-lang3:3.7"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "3.0.5"
group = "htsjdk-igb"
defaultTasks 'jar'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
}

jar {
    archiveName = 'htsjdk-igb-'+version+".jar"
    bnd ('Bundle-Name': 'htsjdk for IGB',
            'Bundle-Vendor': 'Loraine Lab',
            'Bundle-Description': 'htsjdk for IGB',
            'Bundle-DocURL': 'https://github.com/lorainelab/htsjdk',
            'Export-Package': 'htsjdk.*',
            'Import-Package': '!htsjdk.*,org.apache.commons.*',
    )
}

import org.gradle.internal.os.OperatingSystem;

tasks.withType(Test) { task ->
    task.outputs.upToDateWhen { false } // tests will always rerun

    // Always run serially because there are some very badly behaved tests in HTSJDK that
    // will cause errors and even deadlocks if run multi-threaded
    task.maxParallelForks = 1

    // set heap size for the test JVM(s)
    task.minHeapSize = "1G"
    task.maxHeapSize = "2G"

    task.jvmArgs '-Djava.awt.headless=true'  //this prevents awt from displaying a java icon while the tests are running

    int count = 0
    // listen to events in the test execution lifecycle

    beforeTest { descriptor ->
        count++
        if( count % 200 == 0) {
            logger.lifecycle("Finished "+ Integer.toString(count++) + " tests")
        }
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

task testWithDefaultReference(type: Test) {
    description = "Run tests with a default reference File"
    jvmArgs += '-Dsamjdk.reference_fasta=src/test/resources/htsjdk/samtools/cram/ce.fa'

    useTestNG {
        includeGroups "defaultReference"
    }
}

test {
    description = "Runs the unit tests other than the SRA tests"

   useTestNG {
       if (OperatingSystem.current().isUnix()) {
           excludeGroups "slow", "broken", "defaultReference", "ftp", "http", "sra", "ena"
       } else {
           excludeGroups "slow", "broken", "defaultReference", "ftp", "http", "sra", "ena", "unix"
       }
   }
} dependsOn testWithDefaultReference


task testFTP(type: Test) {
    description = "Runs the tests that require connection to a remote ftp server"
    useTestNG {
        includeGroups "ftp"
        excludeGroups "slow", "broken"
    }
}

task testExternalApis(type: Test) {
    description = "Run the SRA, ENA, and HTTP tests (tests that interact with external APIs)"
    jvmArgs += '-Dsamjdk.sra_libraries_download=true'

    useTestNG {
        includeGroups "sra", "http", "ena"
        excludeGroups "slow", "broken"
    }
}

if(project == rootProject) {
    wrapper {
        gradleVersion = '7.6'
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

spotbugs {
    reportLevel = 'high'
    excludeFilter = file('gradle/spotbugs-exclude.xml')
}


spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
/**
 *This specifies what artifacts will be built and uploaded when performing a maven upload.
 */
artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
// uploading artifact to maven central has been updated in version 3.0.5
publishing {
    publications {
        htsjdk(MavenPublication) {
            from components.java
            artifact javadocJar  // publish the output of the javadocJar task
            artifact sourcesJar // publish the output of the sourceJar task
            version = version
            artifactId = "htsjdk-igb"
            groupId = "htsjdk-igb"
            pom {
                name = 'htsjdk-igb'
                packaging = 'bundle'
                url = 'https://github.com/lorainelab/htsjdk-igb'
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = ""
                password = ""
            }
            url = ""
        }
    }
}

task install(dependsOn:publishToMavenLocal)
